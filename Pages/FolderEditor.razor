@page "/foldereditor"
@page "/foldereditor/{FolderId:int}"
@inject StorageService StorageService
@inject NavigationManager Navigation
@inject AppState AppState
@using E6Ko.Services
@using E6Ko.Models
@using Microsoft.AspNetCore.Components.Web

<PageTitle>Folder Editor</PageTitle>

<div class="container mt-4">
    <!-- Carousel of Folders -->
    <div id="folderCarousel" class="carousel slide mb-4">
        <div class="carousel-indicators">
            @for (int i = 0; i < Folders.Count; i++)
            {
                <button type="button" data-bs-target="#folderCarousel" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")" aria-current="@(i == 0 ? "true" : "false")" aria-label="Slide @(i + 1)"></button>
            }
        </div>
        <div class="carousel-inner">
            @foreach (var folder in Folders.OrderBy(f => f.Id))
            {
                var isActive = folder.Id == Folders.OrderBy(f => f.Id).First().Id;
                <div class="carousel-item @(isActive ? "active" : "")">
                    <div class="placeholder-img"></div>
                    <div class="carousel-caption d-none d-md-block">
                        <h5>@folder.Content</h5>
                        <p>
                            @{
                                var folderNotes = Notes.Where(n => n.FolderId == folder.Id).Take(3).ToList();
                                if (folderNotes.Any())
                                {
                                    @string.Join(", ", folderNotes.Select(n => n.Text ?? $"Note {n.Id}"))
                                }
                                else
                                {
                                    @:No notes in this folder.
                                }
                            }
                        </p>
                        <button class="btn btn-primary btn-sm" @onclick="@(async () => await SelectFolderWithPrompt(folder))">Select Folder</button>
                    </div>
                </div>
            }
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#folderCarousel" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#folderCarousel" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>

    <!-- Folder Creation Section -->
    <h3>Create New Folder</h3>
    <div class="row mb-4">
        <!-- Left Side: Folder Creation -->
        <div class="col-md-4">
            <div class="card" style="width: 18rem;">
                <div class="card-img-top d-flex justify-content-center align-items-center" style="height: 150px;">
                    @if (NewFolderIcon != null)
                    {
                        <i class="@NewFolderIcon icon-large"></i>
                    }
                    else
                    {
                        <i class="bi bi-folder icon-large"></i> <!-- Default icon -->
                    }
                </div>
                <div class="card-body text-center">
                    <div class="mb-3">
                        <input type="text" class="form-control" @bind="NewFolderName" placeholder="Enter folder name" />
                    </div>
                    <div class="d-flex justify-content-center gap-3">
                        <button class="btn btn-outline-secondary" @onclick="@(() => SelectIcon("bi-folder"))">
                            <i class="bi bi-folder"></i>
                        </button>
                        <button class="btn btn-outline-secondary" @onclick="@(() => SelectIcon("bi-star"))">
                            <i class="bi bi-star"></i>
                        </button>
                        <button class="btn btn-outline-secondary" @onclick="@(() => SelectIcon("bi-heart"))">
                            <i class="bi bi-heart"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Middle: Create Button -->
        <div class="col-md-4 d-flex align-items-center justify-content-center">
            <button class="btn btn-primary" @onclick="CreateFolder">Create Folder</button>
        </div>

        <!-- Right Side: Under Construction -->
        <div class="col-md-4 d-flex align-items-center justify-content-center">
            <div class="under-construction text-center p-3 border rounded">
                <h5>Under Construction</h5>
            </div>
        </div>
    </div>

    <!-- Folder Editing Section -->
    <h3>Edit Folder</h3>
    <div class="row">
        <!-- Left Side: Selected Folder Card -->
        <div class="col-md-4">
            @if (SelectedFolder != null)
            {
                <div class="card" style="width: 18rem;">
                    <div class="card-img-top d-flex justify-content-center align-items-center" style="height: 150px;">
                        <i class="@(SelectedFolder.Icon ?? "bi-folder") icon-large"></i>
                    </div>
                    <div class="card-body text-center">
                        <h5 class="card-title">@SelectedFolder.Content</h5>
                    </div>
                </div>
            }
            else
            {
                <p class="text-muted">Select a folder from the carousel above to edit.</p>
            }
        </div>

        <!-- Right Side: Notes Accordion with Filter -->
        <div class="col-md-8">
            <!-- Filter Toggle -->
            <div class="mb-3">
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" id="allNotes" name="noteFilter" value="all" checked="@(FilterMode == "all")" @onchange="@(() => SetFilterMode("all"))" />
                    <label class="form-check-label" for="allNotes">All Notes</label>
                </div>
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" id="inFolders" name="noteFilter" value="inFolders" checked="@(FilterMode == "inFolders")" @onchange="@(() => SetFilterMode("inFolders"))" />
                    <label class="form-check-label" for="inFolders">Notes in Folders</label>
                </div>
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" id="withoutFolders" name="noteFilter" value="withoutFolders" checked="@(FilterMode == "withoutFolders")" @onchange="@(() => SetFilterMode("withoutFolders"))" />
                    <label class="form-check-label" for="withoutFolders">Notes Without Folders</label>
                </div>
            </div>

            <!-- Notes Accordion -->
            <div class="accordion" style="max-height: 300px; overflow-y: auto;">
                @foreach (var note in DisplayedNotes)
                {
                    var isInFolder = SelectedFolder != null && note.FolderId == SelectedFolder.Id;
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="heading@(note.Id)">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse@(note.Id)" aria-expanded="false" aria-controls="collapse@(note.Id)">
                                Note@(note.Id) - @(note.Text ?? "Empty") @(note.FolderId.HasValue ? $"(Folder {note.FolderId})" : "(No Folder)")
                            </button>
                            <button class="btn position-absolute end-0 top-0 mt-2 me-2" @onclick="() => ToggleNoteInFolder(note)">
                                <i class="bi bi-plus @(isInFolder ? "text-success" : "")"></i>
                            </button>
                        </h2>
                        <div id="collapse@(note.Id)" class="accordion-collapse collapse" aria-labelledby="heading@(note.Id)" data-bs-parent="#noteAccordion">
                            <div class="accordion-body">
                                @note.Text
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Save Confirmation Modal -->
<div class="modal fade" id="saveFolderModal" tabindex="-1" aria-labelledby="saveFolderModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="saveFolderModalLabel">Save Current Folder?</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                You have unsaved changes in the current folder. Do you want to save before switching to another folder?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="SwitchFolderWithoutSaving">No, Switch Without Saving</button>
                <button type="button" class="btn btn-primary" @onclick="SaveAndSwitchFolder">Yes, Save and Switch</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? FolderId { get; set; }

    private List<Folder> Folders { get; set; } = new List<Folder>();
    private List<Note> Notes { get; set; } = new List<Note>();
    private List<Note> DisplayedNotes { get; set; } = new List<Note>();
    private string FilterMode { get; set; } = "all";

    // Folder Creation
    private string NewFolderName { get; set; } = string.Empty;
    private string? NewFolderIcon { get; set; }

    // Folder Editing
    private Folder? SelectedFolder { get; set; }
    private Folder? PendingFolderSwitch { get; set; }
    private bool HasUnsavedChanges { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Folders = await StorageService.GetFolders();
        Notes = await StorageService.GetNotes();

        if (FolderId.HasValue)
        {
            SelectedFolder = Folders.FirstOrDefault(f => f.Id == FolderId.Value);
        }

        FilterNotes();
    }

    private void FilterNotes()
    {
        DisplayedNotes = FilterMode switch
        {
            "inFolders" => Notes.Where(n => n.FolderId.HasValue).ToList(),
            "withoutFolders" => Notes.Where(n => !n.FolderId.HasValue).ToList(),
            _ => Notes.ToList()
        };
        StateHasChanged();
    }

    private void SetFilterMode(string mode)
    {
        FilterMode = mode;
        FilterNotes();
    }

    private void SelectIcon(string icon)
    {
        NewFolderIcon = icon;
        StateHasChanged();
    }

    private async Task CreateFolder()
    {
        if (string.IsNullOrWhiteSpace(NewFolderName))
        {
            return; // Validation: Ensure name is not empty
        }

        var newFolder = new Folder
        {
            Id = Folders.Count > 0 ? Folders.Max(f => f.Id) + 1 : 1,
            Content = NewFolderName,
            Icon = NewFolderIcon
        };

        Folders.Add(newFolder);
        await StorageService.SaveFolders(Folders);

        // Reset form
        NewFolderName = string.Empty;
        NewFolderIcon = null;

        StateHasChanged();
    }

    private async Task SelectFolderWithPrompt(Folder folder)
    {
        if (SelectedFolder != null && HasUnsavedChanges)
        {
            PendingFolderSwitch = folder;
            // Show the modal using Bootstrap's JavaScript
            var js = "var myModal = new bootstrap.Modal(document.getElementById('saveFolderModal')); myModal.show();";
            await JSRuntime.InvokeVoidAsync("eval", js);
        }
        else
        {
            SelectFolder(folder);
        }
    }

    private void SelectFolder(Folder folder)
    {
        SelectedFolder = folder;
        HasUnsavedChanges = false;
        StateHasChanged();
    }

    private async Task SaveAndSwitchFolder()
    {
        if (SelectedFolder != null)
        {
            await StorageService.SaveFolders(Folders);
            await StorageService.SaveNotes(Notes);
        }
        SelectFolder(PendingFolderSwitch!);
        PendingFolderSwitch = null;
        // Close the modal
        await JSRuntime.InvokeVoidAsync("eval", "var myModal = bootstrap.Modal.getInstance(document.getElementById('saveFolderModal')); myModal.hide();");
    }

    private async Task SwitchFolderWithoutSaving()
    {
        SelectFolder(PendingFolderSwitch!);
        PendingFolderSwitch = null;
        // Close the modal
        await JSRuntime.InvokeVoidAsync("eval", "var myModal = bootstrap.Modal.getInstance(document.getElementById('saveFolderModal')); myModal.hide();");
    }

    private async Task ToggleNoteInFolder(Note note)
    {
        if (SelectedFolder == null)
        {
            return; // No folder selected
        }

        if (note.FolderId == SelectedFolder.Id)
        {
            note.FolderId = null; // Remove from folder
        }
        else
        {
            note.FolderId = SelectedFolder.Id; // Add to folder
        }

        await StorageService.SaveNotes(Notes);
        HasUnsavedChanges = true;
        FilterNotes();
        StateHasChanged();
    }

    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;
}