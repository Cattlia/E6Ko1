@page "/notelist"
<PageTitle>NoteList</PageTitle>

<h1>NoteList</h1>

<div class="accordion" id="noteAccordion">
    @foreach (var note in Notes)
    {
        <div class="accordion-item @(note.IsEmpty ? "empty-note" : "")">
            <h2 class="accordion-header">
                <button class="accordion-button @(note.IsCollapsed ? "collapsed" : "")" type="button" data-bs-toggle="collapse"
                        data-bs-target="#collapseNote@(note.Id)" aria-expanded="@(!note.IsCollapsed)" aria-controls="collapseNote@(note.Id)">
                    Note@(note.Id) - "@(note.Text ?? "Empty")"
                </button>
            </h2>
            <div id="collapseNote@(note.Id)" class="accordion-collapse collapse @(note.IsCollapsed ? "" : "show")" data-bs-parent="#noteAccordion">
                <div class="accordion-body">
                    <p>@(note.Text ?? "No content yet.")</p>
                    <button class="btn btn-outline-secondary edit-btn" @onclick="() => EditNote(note.Id)">
                        <i class="bi bi-pencil-square"></i> Edit
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private class Note
    {
        public int Id { get; set; }
        public string? Text { get; set; } // Changed to nullable string
        public bool IsCollapsed { get; set; } = true;
        public bool IsEmpty => string.IsNullOrWhiteSpace(Text);
    }

    private List<Note> Notes { get; set; } = new List<Note>
    {
        new Note { Id = 1, Text = "Meeting Notes", IsCollapsed = false },
        new Note { Id = 2, Text = null },
        new Note { Id = 3, Text = null },
        new Note { Id = 4, Text = null }
    };

    protected override void OnInitialized()
    {
        UpdateNotes();
    }

    private void UpdateNotes()
    {
        var noteCount = Notes.Count(n => !n.IsEmpty);
        Notes = Notes.Take(10).ToList(); // Limit to 10 notes

        if (noteCount < 3)
        {
            // Ensure at least 3 empty notes if less than 3 notes with content
            while (Notes.Count < 3 || (Notes.Count < 10 && Notes.Last().IsEmpty))
            {
                Notes.Add(new Note { Id = Notes.Count + 1, Text = null });
            }
        }
        else if (Notes.Count < 10)
        {
            // After 3 notes with content, add 1 empty note
            if (Notes.Last().IsEmpty && Notes.Count(n => n.IsEmpty) == 1) return;
            Notes.Add(new Note { Id = Notes.Count + 1, Text = null });
        }
    }

    private void EditNote(int id)
    {
        // Placeholder for edit functionality
        Console.WriteLine($"Editing Note {id}");
        // You can navigate to an edit page or open a modal here
    }
}